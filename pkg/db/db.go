package db

import (
	"encoding/json"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"io/ioutil"
	"log"
	"net/http"
	"news/pkg/models"
	"os"
)

func InitDB() (*gorm.DB, error) {
	//dsn := "root:@tcp(127.0.0.1:3306)/mysql?charset=utf8mb4&parseTime=True&loc=Local"
	dsn := "user:password@tcp(127.0.0.1:3306)/db?charset=utf8mb4&parseTime=True&loc=Local"
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})
	if err != nil {
		return nil, err
	}

	return db, nil
}

func FetchData(limit int, categories string, language string) (*models.AutoGenerated, error) {
	url := fmt.Sprintf("https://api.thenewsapi.com/v1/news/top?api_token=HPDKewpVbNrxkUNIwqWfdvhP6jig8HD3IzBBjVmi&locale=us&limit=%v&categories=%v&language=%v", limit, categories, language)

	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Print(err)
		os.Exit(1)
	}

	res, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Printf("client: error making http request: %s\n", err)
		os.Exit(1)
	}

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		fmt.Printf("client: could not read response body: %s\n", err)
		os.Exit(1)
	}

	var userStat models.AutoGenerated
	err = json.Unmarshal(body, &userStat)
	if err != nil {
		log.Printf("err: %v", err)
		return nil, err
	}

	return &userStat, nil
}

func InsertData(userStat *models.AutoGenerated, limit int, categories string, language string) ([]*models.Data, error) {
	db, err := InitDB()
	if err != nil {
		log.Printf("Error initializing db: %v", err)
		panic(err)
	}

	//similarNews, err := FetchData(limit, categories, language)
	//if err != nil {
	//	log.Printf("Couldn't fetch similar news")
	//	return nil, err
	//}

	list := []*models.Data{}

	//for _, val := range similarNews.Data {

	for _, value := range userStat.Data {
		result := models.Data{
			Uuid:        value.UUID,
			Headline:    value.Title,
			Description: value.Description,
			Keywords:    value.Keywords,
			Snippet:     value.Snippet,
			Url:         value.URL,
			SimilarNews: models.News{
				Uuid:     value.UUID,
				Headline: value.Title,
				Url:      value.URL,
			},
		}
		db.Create(&result)

		list = append(list, &result)
		log.Printf("RESULT: %v", result)
	}
	//}
	return list, nil
}
